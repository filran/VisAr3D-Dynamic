///////////////////////////////////////////////////////////
//  TheCore.cs
//  Implementation of the Class TheCore
//  Generated by Enterprise Architect
//  Created on:      15-mar-2016 08:28:14
//  Original author: Filipe
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using ParserXMI;
using UnityEngine;

namespace Core {
	public class TheCore : IXmlNode {

        public XMI TheXMI;
        public List<IXmlNode> Packages { get; private set; }

        public List<IXmlNode> AllDiagrams { get; private set; }

		public TheCore(string url){
            TheXMI = new XMI(url);
            Packages = new List<IXmlNode>();

            AllDiagrams = TheXMI.Diagrams;

            AddPackages();
            AddDiagramsToPackages();
            AddClassesToDiagrams();
            AddRelationshipsToClassDiagrams();
		}

        //TROCA DE VALROES ENTRE AS CLASSES
        public IXmlNode InterchangeClass(IXmlNode oldclass, IXmlNode newclass)
        {
            newclass.ChildNodes = oldclass.ChildNodes;
            newclass.EA_Type = oldclass.EA_Type;
            newclass.Aggregation = oldclass.Aggregation;
            newclass.End = oldclass.End;
            newclass.Geometry = oldclass.Geometry;
            newclass.Id = oldclass.Id;
            newclass.IdPackage = oldclass.IdPackage;
            newclass.IdSource = oldclass.IdSource;
            newclass.IdTarget = oldclass.IdTarget;
            newclass.IsAbstract = oldclass.IsAbstract;
            newclass.Name = oldclass.Name;
            newclass.Seqno = oldclass.Seqno;
            newclass.Start = oldclass.Start;
            newclass.Style = oldclass.Style;
            newclass.Subject = oldclass.Subject;
            newclass.Tag = oldclass.Tag;
            newclass.Type = oldclass.Type;
            newclass.Visibility = oldclass.Visibility;

            return newclass;
        }

        private void AddPackages()
        {
            foreach(Package p in TheXMI.Packages)
            {
                Packages.Add(p);
            }
        }

        private void AddDiagramsToPackages()
        {
            foreach(Package p in Packages)
            {
                foreach(Node d in TheXMI.Diagrams)
                {
                    if(p.Id == d.IdPackage)
                    {
                        if(d.Type == "Logical")
                        {
                            p.ClassDiagrams.Add(InterchangeClass(d,new ClassDiagram()));
                        }
                        else if (d.Type == "Sequence")
                        {
                            p.SequenceDiagrams.Add(InterchangeClass(d, new SequenceDiagram()));
                        }
                    }
                }
            }
        }

        private void AddClassesToDiagrams()
        {
            //Debug.Log("AddClassesToDiagrams");

            foreach(Package p in Packages)
            {
                //Debug.Log("\tPackage p in Packages");

                foreach(ClassDiagram d in p.ClassDiagrams)
                {
                    //Debug.Log("\t\tClassDiagram d in p.ClassDiagrams - qtdChildren:" + d.ChildNodes.Count);

                    foreach(IXmlNode e in d.ChildNodes)
                    {
                        //Debug.Log("\t\t\tIXmlNode e in d.ChildNodes");

                        foreach(IXmlNode c in TheXMI.Classes)
                        {
                            //Debug.Log("\t\t\t\tIXmlNode c in TheXMI.Classes");

                            if(e.Subject == c.Id)
                            {
                                //Debug.Log("\t\t\t\t\te.Subject == c.Id");

                                Class theclass = new Class();
                                theclass.Geometry = e.Geometry;
                                theclass.Subject = e.Subject;
                                theclass.Seqno = e.Seqno;
                                theclass.Style = e.Style;

                                d.SoftwareEntities.Add(InterchangeClass(c, theclass));
                            }
                        }
                    }
                }
            }
        }

        private void AddRelationshipsToClassDiagrams()
        {
            string s = "AddRelationshipsToClassDiagrams\n";
            foreach(Package p in Packages)
            {
                s += "\tPackage p in Packages\n";
                foreach(ClassDiagram d in p.ClassDiagrams)
                {
                    //s += "\t\tClassDiagram d in p.ClassDiagrams\n";
                    s += "\t\t"+d.Name+" - "+d.Id+"\n";
                    foreach(Class c in d.SoftwareEntities)
                    {
                        //s += "\t\t\tClass c in d.SoftwareEntities\n";
                        s += "\t\t\t"+c.Name+" - "+c.Id+"\n";
                        foreach (Relationship r in TheXMI.Relationships)
                        {
                            if(c.Id == r.IdSource)
                            {
                                s += "\t\t\t\t"+r.EA_Type+" - "+r.Aggregation+" - "+r.Id+"\n";
                                s += "\t\t\t\t\tTarget: " + r.IdTarget + " - " + r.FindById(d.SoftwareEntities, r.IdTarget).Name + "\n\n";

                                switch(r.EA_Type)
                                {
                                    case "Aggregation":
                                        if(r.Aggregation == "shared") //agregacao
                                        {
                                            Relationship rr = new Aggregation();
                                            c.AddRelationshipWith(InterchangeClass(r, rr), r.FindById(d.SoftwareEntities, r.IdTarget));
                                        }
                                        else if(r.Aggregation == "composite") //composicao
                                        {
                                            Relationship rr = new Composition();
                                            c.AddRelationshipWith(InterchangeClass(r, rr), r.FindById(d.SoftwareEntities, r.IdTarget));
                                        }
                                        break;

                                    case "Association":
                                            Relationship rrr = new Association();
                                            c.AddRelationshipWith(InterchangeClass(r, rrr), r.FindById(d.SoftwareEntities, r.IdTarget));
                                        break;

                                    case "Generalization":
                                            Relationship rrrr = new Generalization();
                                            c.AddRelationshipWith(InterchangeClass(r, rrrr), r.FindById(d.SoftwareEntities, r.IdTarget));
                                        break;
                                }
                            }
                        }
                    }
                }
            }

            //foreach(Relationship r in TheXMI.Relationships)
            //{
            //    Debug.Log(r.Name + " | " + r.Id + " | " + r.EA_Type + " | " + r.Aggregation + " | source: " + r.IdSource + " | target: " + r.IdTarget);
            //}

            //Debug.Log(s);
        }

		~TheCore(){

		}

	}//end TheCore

}//end namespace Core