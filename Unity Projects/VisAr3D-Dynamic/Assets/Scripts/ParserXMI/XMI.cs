///////////////////////////////////////////////////////////
//  XMI.cs
//  Implementation of the Class XMI
//  Generated by Enterprise Architect
//  Created on:      07-mar-2016 12:02:20
//  Original author: hercules
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using UnityEngine;
using Composite;

namespace ParserXMI {
	public class XMI {

        public XmlDocument ParserXMI { get; set; }
        private INode<string> Root = new Node<string>();

        public XMI(String url)
        {
            ParserXMI = new XmlDocument();
            ParserXMI.Load(url);

            if(validationXMI())
            {
                ReadNodes(ParserXMI.DocumentElement);
                //Debug.Log(Root.Print(0));
                Debug.Log(Root.Find("elements"));
            }
        }

        private bool validationXMI()
        {
            XmlNode noderoot = this.ParserXMI.DocumentElement;
            if (noderoot.Name == "xmi:XMI")
            {
                //Console.WriteLine("It is XMI");
                return true;
            }
            else
            {
                //Console.WriteLine("It is not XMI");
                return false;
            }
        }

        private void ReadNodes(XmlNode node)
        {
            INode<string> nodec = new Node<string>();
            nodec.Name = node.Name;
            nodec.Attributes = ReadAttributes(node);
            Root.Add(nodec);
            ReadChildNodes(node,nodec);
        }

        private void ReadChildNodes(XmlNode node , INode<string> nodec)
        {
            foreach (XmlNode n in node)
            {
                INode<string> nodecc = new Node<string>();
                nodecc.Name = n.Name;
                nodecc.Attributes = ReadAttributes(node);
                nodec.Add(nodecc);
                ReadChildNodes(n,nodecc);
            }
        }

        private Dictionary<string, string> ReadAttributes(XmlNode node)
        {
            Dictionary<string, string> att = new Dictionary<string, string>();
            foreach(XmlNode a in node.Attributes)
            {
                att.Add(a.Name, a.Value);
            }
            return att;
        }

		~XMI(){

		}

	}//end XMI

}//end namespace ParserXMI